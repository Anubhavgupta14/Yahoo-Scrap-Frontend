{
	"info": {
		"_postman_id": "forex-data-api-tests",
		"name": "Forex Data API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Fetch GBP to INR Forex Data - 1 Month",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"from\": \"GBP\",\n    \"to\": \"INR\",\n    \"period\": \"1M\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/forex-data",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"forex-data"
					]
				},
				"description": "Fetch 1 month of forex data for GBP to INR"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response body is an array\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Data contains required fields\", function () {",
							"    const data = pm.response.json();",
							"    if (data.length > 0) {",
							"        pm.expect(data[0]).to.have.property('fromCurrency', 'GBP');",
							"        pm.expect(data[0]).to.have.property('toCurrency', 'INR');",
							"        pm.expect(data[0]).to.have.property('rate').that.is.a('number');",
							"        pm.expect(data[0]).to.have.property('date');",
							"    }",
							"});",
							"",
							"pm.test(\"Data is sorted by date\", function () {",
							"    const data = pm.response.json();",
							"    for (let i = 1; i < data.length; i++) {",
							"        pm.expect(new Date(data[i].date)).to.be.above(new Date(data[i-1].date));",
							"    }",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Fetch AED to INR Forex Data - 3 Months",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"from\": \"AED\",\n    \"to\": \"INR\",\n    \"period\": \"3M\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/forex-data",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"forex-data"
					]
				},
				"description": "Fetch 3 months of forex data for AED to INR"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains data from past 3 months\", function () {",
							"    const data = pm.response.json();",
							"    const threeMonthsAgo = new Date();",
							"    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);",
							"    ",
							"    pm.expect(data.length).to.be.above(0);",
							"    data.forEach(item => {",
							"        pm.expect(new Date(item.date)).to.be.above(threeMonthsAgo);",
							"    });",
							"});",
							"",
							"pm.test(\"Response data is for AED to INR\", function () {",
							"    const data = pm.response.json();",
							"    data.forEach(item => {",
							"        pm.expect(item.fromCurrency).to.equal('AED');",
							"        pm.expect(item.toCurrency).to.equal('INR');",
							"    });",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Invalid Currency Pair",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"from\": \"XYZ\",\n    \"to\": \"ABC\",\n    \"period\": \"1M\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/forex-data",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"forex-data"
					]
				},
				"description": "Test handling of invalid currency pairs"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Handle invalid currency pair\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 400]);",
							"    ",
							"    const responseBody = pm.response.json();",
							"    if (pm.response.code !== 200) {",
							"        pm.expect(responseBody).to.have.property('error');",
							"    }",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Invalid Period",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"from\": \"GBP\",\n    \"to\": \"INR\",\n    \"period\": \"2Y\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/forex-data",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"forex-data"
					]
				},
				"description": "Test handling of invalid period"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Handle invalid period\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
							"    ",
							"    if (pm.response.code === 400) {",
							"        const responseBody = pm.response.json();",
							"        pm.expect(responseBody).to.have.property('error');",
							"    }",
							"});"
						]
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3001",
			"type": "string"
		}
	]
}